<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:primitive="clr-namespace:Aura.Controls.Primitive"
                    xmlns:util1="clr-namespace:Aura.Controls.Util">
    <SolidColorBrush x:Key="MysteriousGray" Color="#3d3d3d" />
    <SolidColorBrush x:Key="LightMisteriousGray" Color="#7a7a7a"/>
    <SolidColorBrush x:Key="MyYellow" Color="Yellow" />
    <Color x:Key="AccentColor" A="255" R="66" G="134" B="244" />
    <SolidColorBrush x:Key="AccentColorBrush" Color="#4286f4" />
    <SolidColorBrush x:Key="AccentColorBrushLighter" Color="#689df2" />
    <SolidColorBrush x:Key="Lighter" Color="#FFE6F0FF" />
    <Color x:Key="MainBackgroundColor" A="255" R="255" G="255" B="255" />
    <SolidColorBrush x:Key="MainBackgroundBrush" Color="White" />
    <SolidColorBrush x:Key="MainGray" Color="#f2f2f2" />
    <SolidColorBrush x:Key="BorderBrush" Color="LightGray" />
    <SolidColorBrush x:Key="HightLightAccentBrush" Color="#eaf2ff" />
    <SolidColorBrush x:Key="HightLightGrayBrush" Color="#f2f2f2" />
    <SolidColorBrush x:Key="LightGrayBrush" Color="#e2e2e2" />

    <SolidColorBrush x:Key="DarkDividerBrush" Color="#e5e5e5" />
    <SolidColorBrush x:Key="DarkerTextColorBrush" Color="#7f7f7f" />

    <ImageBrush x:Key="TrashNormal" ImageSource="{DynamicResource ImgTrash}" />
    <ImageBrush x:Key="TrashAccent" ImageSource="{DynamicResource ImgTrashAccent}" />
    <ImageBrush x:Key="DuplicateNormal" ImageSource="{DynamicResource ImgDuplicate}" />
    <ImageBrush x:Key="DuplicateAccent" ImageSource="{DynamicResource ImgDuplicateAccent}" />
    <ImageBrush x:Key="ExportNormal" ImageSource="{DynamicResource ImgExport}" />
    <ImageBrush x:Key="ExportAccent" ImageSource="{DynamicResource ImgExportAccent}" />
    <ImageBrush x:Key="ImportNormal" ImageSource="{DynamicResource ImgImport}" />
    <ImageBrush x:Key="ImportAccent" ImageSource="{DynamicResource ImgImportAccent}" />

    <Style x:Key="DividerRowStyle" TargetType="{x:Type primitive:TextDivider}">
        <Setter Property="Background" Value="{StaticResource DarkDividerBrush}" />
        <Setter Property="BorderThickness" Value="0 1 0 0"/>
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Margin" Value="0 5 0 0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type primitive:TextDivider}">
                    <Border
                        Margin="{TemplateBinding Margin}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        BorderBrush="LightGray"
                        Height="{TemplateBinding Height}"
                        Background="{StaticResource DarkDividerBrush}">
                        <TextBlock x:Name="PART_DividerTextBlock"
                                   Text="{TemplateBinding Text}"
                                   MinHeight="0"
                                   Height="Auto"
                                   FontSize="12"
                                   Typography.Capitals="AllSmallCaps"
                                   Padding="8 0 0 0"
                                   Margin="0 5 0 3"
                                   Foreground="{StaticResource DarkerTextColorBrush}"
                                   VerticalAlignment="Bottom" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RowStyleSettings" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="1 1 1 0" />
        <Setter Property="BorderBrush" Value="LightGray" />
        <Setter Property="Padding" Value="10 5 10 5" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="MinWidth" Value="35" />
    </Style>

    <Style x:Key="RowStyleSettingsSmall"  TargetType="{x:Type Border}" BasedOn="{StaticResource RowStyleSettings}">
        <Setter Property="Padding" Value="5 0 5 0" />
    </Style>
    <Style x:Key="LabelTextBlockSettings" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Foreground" Value="#383838" />
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="Margin" Value="0,0,0,2" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style x:Key="LabelTextBlockSettingsSubCategory" TargetType="{x:Type TextBlock}"
           BasedOn="{StaticResource LabelTextBlockSettings}">
        <Setter Property="Foreground" Value="#7a7a7a" />
    </Style>

    <Style x:Key="LabelTextBlockSettingsSmall" TargetType="{x:Type TextBlock}"
           BasedOn="{StaticResource LabelTextBlockSettings}">
        <Setter Property="FontSize" Value="12" />
    </Style>

    <Style x:Key="TextBoxSettingsWithoutWidth" TargetType="{x:Type TextBox}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="Background" Value="{StaticResource MainBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="LightGray" />
        <Setter Property="IsTabStop" Value="True" />
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="bg" BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}" BorderThickness="1" Padding="2 0 2 0">
                        <ScrollViewer x:Name="PART_ContentHost"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter Property="Background" Value="{StaticResource MainGray}" />
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter Property="ToolTip"
                                    Value="{Binding RelativeSource={x:Static RelativeSource.Self},
                                            Path=(Validation.Errors)[0].ErrorContent}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsReadOnly" Value="False" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="BorderBrush" TargetName="bg"
                                        Value="{StaticResource AccentColorBrush}" />
                                <Setter Property="BorderThickness" TargetName="bg" Value="1" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="True" />
                                <Condition Property="IsReadOnly" Value="False" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="BorderBrush" TargetName="bg"
                                        Value="{StaticResource AccentColorBrush}" />
                                <Setter Property="BorderThickness" TargetName="bg" Value="1" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TextBoxSettings" TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxSettingsWithoutWidth}">
        <Setter Property="Width" Value="70" />
    </Style>
    <Style x:Key="TextBoxSettingsDescription" TargetType="{x:Type TextBox}"
           BasedOn="{StaticResource TextBoxSettingsWithoutWidth}">
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="TextAlignment" Value="Left" />
        <Setter Property="Padding" Value="5 3 5 3" />
        <Setter Property="AcceptsReturn" Value="True" />
    </Style>

    <Style x:Key="RoundToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="LightGray"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Width="18" Height="18">
                                <Ellipse x:Name="Ellipse_Border" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
                                <Ellipse Margin="4" x:Name="CheckMark" Fill="{DynamicResource AccentColorBrushLighter}" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </BulletDecorator>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter Property="Fill" Value="LightGray" TargetName="CheckMark"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" Value="{DynamicResource AccentColorBrushLighter}" TargetName="Ellipse_Border"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" Value="{DynamicResource PressedBrush}" TargetName="Ellipse_Border"/>
                            <Setter Property="Stroke" Value="{DynamicResource GlyphBrush}" TargetName="Ellipse_Border"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Ellipse_Border"/>
                            <Setter Property="Stroke" Value="#40000000" TargetName="Ellipse_Border"/>
                            <Setter Property="Foreground" Value="#80000000"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MinimalisticExpander" TargetType="{x:Type Expander}">
        <Style.Resources>
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        </Style.Resources>
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding}" Style="{DynamicResource LabelTextBlockSettings}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="HeaderStringFormat" Value="S" />
        <Setter Property="BorderThickness" Value="1 0 1 1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" x:Name="ContentRow" />
                        </Grid.RowDefinitions>
                        <ToggleButton Width="{TemplateBinding ActualWidth}"
                                      IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                      HorizontalAlignment="Left"
                                      OverridesDefaultStyle="True">
                            <ToggleButton.Template>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <ContentPresenter />
                                </ControlTemplate>
                            </ToggleButton.Template>
                            <ToggleButton.Content>
                                <Border x:Name="Border" Style="{DynamicResource RowStyleSettings}"
                                        Background="{TemplateBinding Background}"
                                        BorderThickness="{TemplateBinding BorderThickness}">
                                    <DockPanel LastChildFill="True">
                                        <StackPanel DockPanel.Dock="Right" Orientation="Horizontal">
                                            <Border x:Name="OpenArrow"
                                                    HorizontalAlignment="Right"
                                                    Width="9" Height="13"
                                                    Background="{DynamicResource SimpleArrow}"
                                                    Margin="5 0 5 0"
                                                    RenderTransformOrigin="0.5,0.5">
                                                <Border.RenderTransform>
                                                    <TransformGroup>
                                                        <ScaleTransform />
                                                        <SkewTransform />
                                                        <RotateTransform />
                                                        <TranslateTransform />
                                                    </TransformGroup>
                                                </Border.RenderTransform>
                                            </Border>
                                        </StackPanel>
                                        <StackPanel DockPanel.Dock="Left" Orientation="Horizontal">
                                            <ContentPresenter RecognizesAccessKey="True" ContentSource="Header" />
                                        </StackPanel>
                                        <Border Background="Transparent" />
                                    </DockPanel>
                                </Border>
                            </ToggleButton.Content>
                        </ToggleButton>
                        <Border x:Name="ExpandSite" Grid.Row="1"
                                Visibility="Collapsed"
                                BorderBrush="LightGray"
                                Background="{TemplateBinding Background}"
                                Height="{TemplateBinding Height}">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Focusable="false" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="ExpandSite" />
                            <Setter TargetName="ExpandSite" Property="BorderThickness" Value="1 0 1 1" />
                            <Setter TargetName="OpenArrow" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <VisualBrush x:Key="AnisoprintLogoSimplified">
        <VisualBrush.Visual>
            <Canvas>
                <Path Data="M0,120 L100.5,19.5 220,140 215,230 120,240 z" Fill="#FFEAEAEA" Stroke="#FFA4A4A4"
                      StrokeThickness="20" Height="300" Width="300" />
            </Canvas>
        </VisualBrush.Visual>
    </VisualBrush>
    <VisualBrush x:Key="SimpleArrow" Stretch="Uniform">
        <VisualBrush.Visual>
            <Canvas Height="220" Width="120">
                <Path Data="M240,30 L140,130 240,230" StrokeEndLineCap="Round" StrokeStartLineCap="Round"
                      Stroke="#FF444444" StrokeThickness="20" StrokeLineJoin="Round" />
            </Canvas>
        </VisualBrush.Visual>
    </VisualBrush>
    <VisualBrush x:Key="SimpleArrowFilled" Stretch="Uniform">
        <VisualBrush.Visual>
            <Canvas Height="220" Width="120">
                <Path Data="M240,30 L140,130 240,230 240,30" StrokeEndLineCap="Round" StrokeStartLineCap="Round"
                      Stroke="#FFbcbcbc" Fill="#FFbcbcbc" StrokeThickness="20" StrokeLineJoin="Round" />
            </Canvas>
        </VisualBrush.Visual>
    </VisualBrush>
    <VisualBrush x:Key="CopyIcon">
        <VisualBrush.Visual>
            <Canvas Height="245" Width="205">
                <Path Data="M20,40 L20,200 140,200 140,40 z" Height="180" Canvas.Left="10" StrokeStartLineCap="Round"
                      Stretch="Fill" StrokeEndLineCap="Round" Stroke="#FF444444" StrokeThickness="20"
                      StrokeLineJoin="Round" Canvas.Top="55" Width="140" />
                <Path Data="M45,25 L180,25 180,190" Height="185" Canvas.Left="35" StrokeStartLineCap="Round"
                      Stretch="Fill" StrokeEndLineCap="Round" Stroke="#FF444444" StrokeThickness="20"
                      StrokeLineJoin="Round" Canvas.Top="15" Width="155" />
            </Canvas>
        </VisualBrush.Visual>
    </VisualBrush>


    <util1:ObservableCollectionWrapper x:Key="StandardColorsCollection">
        <util1:MyColorItem Color="#88FFFFFF" Name="Transparent" />
        <util1:MyColorItem Color="#FF000000" Name="Black" />
        <util1:MyColorItem Color="#FFFFFFFF" Name="White" />
        <util1:MyColorItem Color="#FFB2BABB" Name="Gray" />
        <util1:MyColorItem Color="#FF7DCEA0" Name="Green" />
        <util1:MyColorItem Color="#FF76D7C4" Name="BlueGreen" />
        <util1:MyColorItem Color="#FF7FB3D5" Name="Blue" />
        <util1:MyColorItem Color="#FFBB8FCE" Name="Purple" />
        <util1:MyColorItem Color="#FFF06292" Name="Pink" />
        <util1:MyColorItem Color="#FFEC7063" Name="Red" />
        <util1:MyColorItem Color="#FFE59866" Name="Orange" />
        <util1:MyColorItem Color="#FFF7DC6F" Name="Yellow" />
    </util1:ObservableCollectionWrapper>

    <Style x:Key="SimpleRowStyleSettings" TargetType="{x:Type Border}">
        <Setter Property="Padding" Value="10 7 10 0" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="MinWidth" Value="35" />
    </Style>

</ResourceDictionary>