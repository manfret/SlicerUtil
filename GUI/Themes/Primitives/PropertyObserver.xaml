<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="http://helix-toolkit.org/wpf">

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

    <SolidColorBrush x:Key="SpecialGrey">
        <SolidColorBrush.Color>
            <Color A="255" B="241" G="241" R="241"></Color>
        </SolidColorBrush.Color>
    </SolidColorBrush>

    <Style x:Key="lineStyle" TargetType="Line">
        <Setter Property="Stroke" Value="Gray" />
        <Setter Property="Stretch" Value="Fill" />
        <Setter Property="Grid.ZIndex" Value="100" />
        <Setter Property="StrokeDashArray" Value="1,2" />
    </Style>

    <Style x:Key="horizontalLineStyle" TargetType="Line" BasedOn="{StaticResource lineStyle}">
        <Setter Property="X2" Value="1" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
    </Style>


    <Style TargetType="{x:Type TreeView}">
        <Setter Property="Background" Value="{StaticResource SpecialGrey}" />
    </Style>
    <Style TargetType="{x:Type TreeViewItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TreeViewItem">
                    <StackPanel Margin="1">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" MinWidth="19" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <!--
                             Note that the following do not work, but I believe the top 2 should?!
                             <ToggleButton IsChecked="{TemplateBinding IsExpanded}" ClickMode="Press" Name="Expander">
                             <ToggleButton IsChecked="{TemplateBinding Property=IsExpanded}" ClickMode="Press" Name="Expander">
                             <ToggleButton IsChecked="{TemplateBinding Path=IsExpanded}" ClickMode="Press" Name="Expander">
                        -->
                            <ToggleButton IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" Name="Expander">
                                <ToggleButton.Style>
                                    <Style TargetType="ToggleButton">
                                        <Setter Property="Focusable" Value="false" />
                                        <Setter Property="Width" Value="16" />
                                        <Setter Property="Height" Value="16" />
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="ToggleButton">
                                                    <Border Padding="5,5,5,5" Background="#00FFFFFF" Width="16" Height="16">
                                                        <Path Fill="#00FFFFFF" Stroke="#FF989898" Name="ExpandPath">
                                                            <Path.Data>
                                                                <PathGeometry Figures="M0,0L0,6L6,0z" />
                                                            </Path.Data>
                                                            <Path.RenderTransform>
                                                                <RotateTransform Angle="135" CenterX="3" CenterY="3" />
                                                            </Path.RenderTransform>
                                                        </Path>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                                                            <Setter TargetName="ExpandPath" Property="Shape.Stroke" Value="#FF1BBBFA" />
                                                            <Setter TargetName="ExpandPath" Property="Shape.Fill" Value="#00FFFFFF" />
                                                        </Trigger>
                                                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                                                            <Setter TargetName="ExpandPath" Property="UIElement.RenderTransform">
                                                                <Setter.Value>
                                                                    <RotateTransform Angle="180" CenterX="3" CenterY="3" />
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter TargetName="ExpandPath" Property="Shape.Fill" Value="#FF595959" />
                                                            <Setter TargetName="ExpandPath" Property="Shape.Stroke" Value="#FF262626" />
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>
                            <Border x:Name="Bd" HorizontalAlignment="Stretch" 
                                    BorderThickness="{TemplateBinding Border.BorderThickness}"
                                    BorderBrush="{TemplateBinding Border.BorderBrush}"
                                    Padding="{TemplateBinding Control.Padding}"
                                    Background="{TemplateBinding Panel.Background}"
                                    SnapsToDevicePixels="True"
                                    Grid.Column="1">
                                <TextBlock x:Name="Header"
                                    Text="{TemplateBinding Header}"
                                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                            </Border>
                            <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.Row="1" />
                        </Grid>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TreeViewItem.IsExpanded" Value="False">
                            <Setter TargetName="ItemsHost" Property="UIElement.Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ItemsControl.HasItems" Value="False">
                            <Setter TargetName="Expander" Property="UIElement.Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="TreeViewItem.IsSelected" Value="True">
                            <Setter TargetName="Bd" Property="Panel.Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TreeViewItem.IsSelected" Value="True" />
                                <Condition Property="Selector.IsSelectionActive" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Panel.Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        </MultiTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

<!--    <Style TargetType="{x:Type propertyManager:PropertyObserver}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type propertyManager:PropertyObserver}">
                    <Grid x:Name="MainGrid" Background="{StaticResource SpecialGrey}" >
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <Border Grid.RowSpan="2" VerticalAlignment="Stretch" Margin="7 7 7 0" Background="{StaticResource SpecialGrey}" BorderBrush="Gray" BorderThickness="1" Padding="0 2 0 0">
                            <ScrollViewer x:Name="scrollLeftList" Width="250" Background="SteelBlue" >
                                <TreeView x:Name="treeViewOptions" BorderThickness="0">
                                    <TreeViewItem Header="General">
                                        <TreeViewItem x:Name="tviTableOptions" Header="Table" />
                                    </TreeViewItem>
                                    <TreeViewItem x:Name="tviToolsOptions" Header="Tools" />
                                </TreeView>
                            </ScrollViewer>
                        </Border>

                        ~1~перечисляем все элементы, кторые могут быть в правой части, в зависмости от выбранного пункта меню будут демонстрироваться разные@1@
                        <propertyManager:TableOptions x:Name="PART_TableOptions" Margin="4" VerticalAlignment="Top" Grid.Column="1" Grid.Row="0" 
                                                      Visibility="{Binding ElementName=tviTableOptions, Path=IsSelected, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                        <propertyManager:ToolsOptions x:Name="PART_ToolsOptions" Margin="4" VerticalAlignment="Top" Grid.Column="1" Grid.Row="0"
                                                      Visibility="{Binding ElementName=tviToolsOptions, Path=IsSelected, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                        <Separator Grid.Column="1"  Grid.Row="1" Margin="5 0 10 0"  />
                        <StackPanel  Grid.Column="1" Grid.Row="2" HorizontalAlignment="Right" VerticalAlignment="Bottom" Orientation="Horizontal">
                            <Button x:Name="btnSave" Margin="5 10 5 10" Width="Auto" MinWidth="80"  Padding="5 1 5 1" Command="{Binding RelativeSource={RelativeSource TemplatedParent}, 
                                Path=SaveCommand}">OK</Button>
                            <Button x:Name="btnCancel" Margin="5 10 10 10" Width="Auto" MinWidth="80" Padding="5 1 5 1" Command="{Binding RelativeSource={RelativeSource TemplatedParent},
                                Path=CancelCommand}">Cancel</Button>
                        </StackPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

<!--    <Style TargetType="{x:Type propertyManager:TableOptions}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type propertyManager:TableOptions}">
                    <Border HorizontalAlignment="Stretch">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"></RowDefinition>
                                <RowDefinition Height="Auto"></RowDefinition>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"></ColumnDefinition>
                                <ColumnDefinition Width="*"></ColumnDefinition>
                            </Grid.ColumnDefinitions>

                            <TextBox  x:Name="Length" Margin="3" MaxLength="5" MaxWidth="95" MinWidth="60" 
                                    Text="{Binding TableLength, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, ValidatesOnExceptions=true, NotifyOnValidationError=true}"
                                    Padding="2 2 2 0"
                                    ></TextBox>
                            <TextBox  Grid.Row="1" Grid.Column="0" x:Name="Width" Margin="3" MaxLength="5" MaxWidth="95" MinWidth="60" 
                                    Text="{Binding TableWidth, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, ValidatesOnExceptions=true, NotifyOnValidationError=true}"
                                    Padding="2 2 2 0"
                                    ></TextBox>
                            <Label Grid.Row="0" Grid.Column="1" Margin="0 3 0 3" >table length</Label>
                            <Label  Grid.Row="1" Grid.Column="1" Margin="0 3 0 3">table width</Label>

                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type propertyManager:ToolsOptions}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type propertyManager:ToolsOptions}">
                    <StackPanel HorizontalAlignment="Left" Orientation="Horizontal">
                        <CheckBox x:Name="cbShowTranslateRotate" Margin="0 10 0 10" IsChecked="{Binding ShowTranslateRotate, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" />
                        <Label x:Name="tbShowTranlateRotate" Margin="0 3 0 3">show model translate | rotate tip</Label>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->
    
</ResourceDictionary>