//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Aura.Controls.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class SettingsTipsResorces {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SettingsTipsResorces() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Aura.Controls.Resources.SettingsTipsResorces", typeof(SettingsTipsResorces).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap Error {
            get {
                object obj = ResourceManager.GetObject("Error", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cooling fan index is the number of this cooling fan in printer firmware..
        /// </summary>
        public static string ExtruderFanIndex {
            get {
                return ResourceManager.GetString("ExtruderFanIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The has cooling fan flag is the flag which indicates thar extruder has a nozzle cooling fan..
        /// </summary>
        public static string ExtruderHasFan {
            get {
                return ResourceManager.GetString("ExtruderHasFan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The nozzle diameter is the diameter of the outlet hole of a nozzle..
        /// </summary>
        public static string ExtruderNozzleDiameter {
            get {
                return ResourceManager.GetString("ExtruderNozzleDiameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to X offset is the extruder X offset relative to the base point on a print head. If your printer has only one extruder then set this parameter to zero. If printer firmware doesn&apos;t set offset by itself then you should set other extruders offsets relative to base (usually first) extruder. In this case you sholud set offsets for this base extruder offsets to zero..
        /// </summary>
        public static string ExtruderOffsetX {
            get {
                return ResourceManager.GetString("ExtruderOffsetX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Y offset is the extruder Y offset relatively to the base point on a print head. If your printer has only one extruder then set this parameter to zero. If printer firmware doesn&apos;t set offset by itself then you should set other extruders offsets relative to base (usually first) extruder. In this case you sholud set offsets for this base extruder offsets to zero..
        /// </summary>
        public static string ExtruderOffsetY {
            get {
                return ResourceManager.GetString("ExtruderOffsetY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Z offset is the extruder Z offset relatively to the base point on a print head. If your printer has only one extruder then set this parameter to zero. If printer firmware doesn&apos;t set offset by itself then you should set other extruders offsets relative to base (usually first) extruder. In this case you sholud set offsets for this base extruder offsets to zero..
        /// </summary>
        public static string ExtruderOffsetZ {
            get {
                return ResourceManager.GetString("ExtruderOffsetZ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cut G-code is the code, that actuates fiber cutting. This value should be set only by printer manufacturer..
        /// </summary>
        public static string ExtruderPFCutCode {
            get {
                return ResourceManager.GetString("ExtruderPFCutCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cut distance is the distance from a cut point to outlet hole of a nozzle. This value should be set only by printer manufacturer..
        /// </summary>
        public static string ExtruderPFCutDistance {
            get {
                return ResourceManager.GetString("ExtruderPFCutDistance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The fiber restart length is the length of fiber extrusion during restart. This is necessary for the fiber tail to get out of the nozzle. This parameter in general should equal to the cut distance..
        /// </summary>
        public static string ExtruderPFExtraLength {
            get {
                return ResourceManager.GetString("ExtruderPFExtraLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The fiber diameter is the average diameter of a fiber thread measured in cross section. For the Anisoprint CCF-1.5k this value is 0.34mm..
        /// </summary>
        public static string FiberDiameter {
            get {
                return ResourceManager.GetString("FiberDiameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The do plastic retract flag is the flag which indicates that plastic retract should be performed during composite printing..
        /// </summary>
        public static string FiberDoPlasticRetract {
            get {
                return ResourceManager.GetString("FiberDoPlasticRetract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finish ironing distance is the length of travel which is performed by a composite nozzle at the end of fiber polygon in the direction of last segment. It happens after cut and full exit a of fiber tail. This movement is needed for ironing tail which, if not done, will be fluffy..
        /// </summary>
        public static string FiberEndPolygonEmptyDistanceMM {
            get {
                return ResourceManager.GetString("FiberEndPolygonEmptyDistanceMM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fiber extrusion speed is the speed of the fiber tail extrusion..
        /// </summary>
        public static string FiberExtraSpeed {
            get {
                return ResourceManager.GetString("FiberExtraSpeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The plastic flow multiplier is a factor by which amount of extruded plastic in a composite extruder is multiplied. Vary this parameter if all composite polygons have under- or overextrusion..
        /// </summary>
        public static string FiberExtrusionMultiplier {
            get {
                return ResourceManager.GetString("FiberExtrusionMultiplier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Z-lift on restart is the height at which a composite extruder is raised to put out a fiber tail and start to print a composite polygon..
        /// </summary>
        public static string FiberZHopF {
            get {
                return ResourceManager.GetString("FiberZHopF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Restart pause is the delay before start of composite polygon printing. This is needed for the good adhesion between a fiber tail and an a underlying layer..
        /// </summary>
        public static string FiberZHopFPauseAdhesion {
            get {
                return ResourceManager.GetString("FiberZHopFPauseAdhesion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GlobalFilamentDiameter.
        /// </summary>
        public static string FilamentDiameterLabel {
            get {
                return ResourceManager.GetString("FilamentDiameterLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgExtruderCompositeCutDistance {
            get {
                object obj = ResourceManager.GetObject("ImgExtruderCompositeCutDistance", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgExtruderCompositeFiberRestart {
            get {
                object obj = ResourceManager.GetObject("ImgExtruderCompositeFiberRestart", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgExtruderHasFan {
            get {
                object obj = ResourceManager.GetObject("ImgExtruderHasFan", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgExtruderHorizontalOffset {
            get {
                object obj = ResourceManager.GetObject("ImgExtruderHorizontalOffset", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgExtruderNozzleDiameter {
            get {
                object obj = ResourceManager.GetObject("ImgExtruderNozzleDiameter", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgExtruderZOffset {
            get {
                object obj = ResourceManager.GetObject("ImgExtruderZOffset", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgFiberDiameter {
            get {
                object obj = ResourceManager.GetObject("ImgFiberDiameter", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgFiberFiberExtrusionSpeed {
            get {
                object obj = ResourceManager.GetObject("ImgFiberFiberExtrusionSpeed", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgFiberFinishIroningDistance {
            get {
                object obj = ResourceManager.GetObject("ImgFiberFinishIroningDistance", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgFiberPlasticFlowMultiplier {
            get {
                object obj = ResourceManager.GetObject("ImgFiberPlasticFlowMultiplier", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgFiberRestartPause {
            get {
                object obj = ResourceManager.GetObject("ImgFiberRestartPause", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgFiberZLiftOnRestart {
            get {
                object obj = ResourceManager.GetObject("ImgFiberZLiftOnRestart", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPlasticBedTemperature {
            get {
                object obj = ResourceManager.GetObject("ImgPlasticBedTemperature", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPlasticCoastLength {
            get {
                object obj = ResourceManager.GetObject("ImgPlasticCoastLength", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPlasticCoolingEnable {
            get {
                object obj = ResourceManager.GetObject("ImgPlasticCoolingEnable", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPlasticExtraUnretractLength {
            get {
                object obj = ResourceManager.GetObject("ImgPlasticExtraUnretractLength", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPlasticExtrusionMultiplier {
            get {
                object obj = ResourceManager.GetObject("ImgPlasticExtrusionMultiplier", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPlasticFilamentDiameter {
            get {
                object obj = ResourceManager.GetObject("ImgPlasticFilamentDiameter", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPlasticFirstLayersFanSpeedHeight {
            get {
                object obj = ResourceManager.GetObject("ImgPlasticFirstLayersFanSpeedHeight", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPlasticFirstLayersFanSpeedHeight1 {
            get {
                object obj = ResourceManager.GetObject("ImgPlasticFirstLayersFanSpeedHeight1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPlasticFirstLayersHeight {
            get {
                object obj = ResourceManager.GetObject("ImgPlasticFirstLayersHeight", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPlasticInfillSolidAngleStep {
            get {
                object obj = ResourceManager.GetObject("ImgPlasticInfillSolidAngleStep", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPlasticInfillSolidAngleStep1 {
            get {
                object obj = ResourceManager.GetObject("ImgPlasticInfillSolidAngleStep1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPlasticMaximumFanSpeed {
            get {
                object obj = ResourceManager.GetObject("ImgPlasticMaximumFanSpeed", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPlasticPlasticZHopHeight {
            get {
                object obj = ResourceManager.GetObject("ImgPlasticPlasticZHopHeight", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPlasticPrintTemperature1 {
            get {
                object obj = ResourceManager.GetObject("ImgPlasticPrintTemperature1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPlasticPrintTemperature2 {
            get {
                object obj = ResourceManager.GetObject("ImgPlasticPrintTemperature2", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPlasticRegularFanSpeed {
            get {
                object obj = ResourceManager.GetObject("ImgPlasticRegularFanSpeed", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPlasticRetractionLength {
            get {
                object obj = ResourceManager.GetObject("ImgPlasticRetractionLength", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPlasticRetractionLengthOnToolChange {
            get {
                object obj = ResourceManager.GetObject("ImgPlasticRetractionLengthOnToolChange", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPlasticRetractionMinimumTravel {
            get {
                object obj = ResourceManager.GetObject("ImgPlasticRetractionMinimumTravel", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPlasticWipeLength {
            get {
                object obj = ResourceManager.GetObject("ImgPlasticWipeLength", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPrinterBowden {
            get {
                object obj = ResourceManager.GetObject("ImgPrinterBowden", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPrinterExternalShell {
            get {
                object obj = ResourceManager.GetObject("ImgPrinterExternalShell", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPrinterHasHeatedTable {
            get {
                object obj = ResourceManager.GetObject("ImgPrinterHasHeatedTable", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPrinterHeight {
            get {
                object obj = ResourceManager.GetObject("ImgPrinterHeight", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPrinterLength {
            get {
                object obj = ResourceManager.GetObject("ImgPrinterLength", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPrinterTravelSpeedXY {
            get {
                object obj = ResourceManager.GetObject("ImgPrinterTravelSpeedXY", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPrinterTravelSpeedZ {
            get {
                object obj = ResourceManager.GetObject("ImgPrinterTravelSpeedZ", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPrinterWidth {
            get {
                object obj = ResourceManager.GetObject("ImgPrinterWidth", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgPrinterZLiftHeight {
            get {
                object obj = ResourceManager.GetObject("ImgPrinterZLiftHeight", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileBrimLoops {
            get {
                object obj = ResourceManager.GetObject("ImgProfileBrimLoops", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileExternalShellPrintingSpeed {
            get {
                object obj = ResourceManager.GetObject("ImgProfileExternalShellPrintingSpeed", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileExternalShellThickness {
            get {
                object obj = ResourceManager.GetObject("ImgProfileExternalShellThickness", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileExtrusionCoefficient {
            get {
                object obj = ResourceManager.GetObject("ImgProfileExtrusionCoefficient", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileFillPattern {
            get {
                object obj = ResourceManager.GetObject("ImgProfileFillPattern", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileFLCoeffToNormals {
            get {
                object obj = ResourceManager.GetObject("ImgProfileFLCoeffToNormals", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileFLThickness {
            get {
                object obj = ResourceManager.GetObject("ImgProfileFLThickness", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileInfillCStartingAngle {
            get {
                object obj = ResourceManager.GetObject("ImgProfileInfillCStartingAngle", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileInfillFiberAnisogridAngleBetweenMainRibs {
            get {
                object obj = ResourceManager.GetObject("ImgProfileInfillFiberAnisogridAngleBetweenMainRibs", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileInfillFiberAnisogridOrientation {
            get {
                object obj = ResourceManager.GetObject("ImgProfileInfillFiberAnisogridOrientation", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileInfillFiberIsogridOrientation {
            get {
                object obj = ResourceManager.GetObject("ImgProfileInfillFiberIsogridOrientation", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileInfillFiberRombicFirstRibAngle {
            get {
                object obj = ResourceManager.GetObject("ImgProfileInfillFiberRombicFirstRibAngle", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileInfillFiberRombicSecondRibAngle {
            get {
                object obj = ResourceManager.GetObject("ImgProfileInfillFiberRombicSecondRibAngle", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileInfillFiberSolidMinLength {
            get {
                object obj = ResourceManager.GetObject("ImgProfileInfillFiberSolidMinLength", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileInfillSStartingAngle {
            get {
                object obj = ResourceManager.GetObject("ImgProfileInfillSStartingAngle", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileInsetXFFiberFeedrate {
            get {
                object obj = ResourceManager.GetObject("ImgProfileInsetXFFiberFeedrate", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileInsetXFSolidPlasticLayersBelowFiber {
            get {
                object obj = ResourceManager.GetObject("ImgProfileInsetXFSolidPlasticLayersBelowFiber", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileInxsetXFEW {
            get {
                object obj = ResourceManager.GetObject("ImgProfileInxsetXFEW", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileLayerThicknessInsetXPInfill {
            get {
                object obj = ResourceManager.GetObject("ImgProfileLayerThicknessInsetXPInfill", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileLayerThicknessMacroLayerHeight {
            get {
                object obj = ResourceManager.GetObject("ImgProfileLayerThicknessMacroLayerHeight", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileLayerThicknessSupport {
            get {
                object obj = ResourceManager.GetObject("ImgProfileLayerThicknessSupport", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileOozePreventionAvoidCrossing {
            get {
                object obj = ResourceManager.GetObject("ImgProfileOozePreventionAvoidCrossing", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileOtherExtensionIntoPerimeter {
            get {
                object obj = ResourceManager.GetObject("ImgProfileOtherExtensionIntoPerimeter", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileOtherTrimGapRatio {
            get {
                object obj = ResourceManager.GetObject("ImgProfileOtherTrimGapRatio", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfilePartFillDensity {
            get {
                object obj = ResourceManager.GetObject("ImgProfilePartFillDensity", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfilePartGenerateBrim {
            get {
                object obj = ResourceManager.GetObject("ImgProfilePartGenerateBrim", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfilePartGenerateFiberInfill {
            get {
                object obj = ResourceManager.GetObject("ImgProfilePartGenerateFiberInfill", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfilePartGenerateFiberPerimeters {
            get {
                object obj = ResourceManager.GetObject("ImgProfilePartGenerateFiberPerimeters", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfilePartGenerateSkirt {
            get {
                object obj = ResourceManager.GetObject("ImgProfilePartGenerateSkirt", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfilePartGenerateSupport {
            get {
                object obj = ResourceManager.GetObject("ImgProfilePartGenerateSupport", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfilePartGenerateWipeTower {
            get {
                object obj = ResourceManager.GetObject("ImgProfilePartGenerateWipeTower", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfilePartInfillFiberType {
            get {
                object obj = ResourceManager.GetObject("ImgProfilePartInfillFiberType", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfilePartInfillSBottomTopLayerCount {
            get {
                object obj = ResourceManager.GetObject("ImgProfilePartInfillSBottomTopLayerCount", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfilePartInsetFInnerCount {
            get {
                object obj = ResourceManager.GetObject("ImgProfilePartInsetFInnerCount", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfilePartInsetFOuterCount {
            get {
                object obj = ResourceManager.GetObject("ImgProfilePartInsetFOuterCount", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfilePartInsetX0Count {
            get {
                object obj = ResourceManager.GetObject("ImgProfilePartInsetX0Count", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfilePartInsetXPCount {
            get {
                object obj = ResourceManager.GetObject("ImgProfilePartInsetXPCount", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfilePartInsetXPInnerWhenFiber {
            get {
                object obj = ResourceManager.GetObject("ImgProfilePartInsetXPInnerWhenFiber", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfilePartInsetXPOuterWhenFiber {
            get {
                object obj = ResourceManager.GetObject("ImgProfilePartInsetXPOuterWhenFiber", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfilePartRibPlacement {
            get {
                object obj = ResourceManager.GetObject("ImgProfilePartRibPlacement", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileSkirtDistance {
            get {
                object obj = ResourceManager.GetObject("ImgProfileSkirtDistance", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileSkirtLoops {
            get {
                object obj = ResourceManager.GetObject("ImgProfileSkirtLoops", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileSupportDoAirGaps {
            get {
                object obj = ResourceManager.GetObject("ImgProfileSupportDoAirGaps", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileSupportGenerateInternalSupport {
            get {
                object obj = ResourceManager.GetObject("ImgProfileSupportGenerateInternalSupport", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileSupportGeneratePerimeters {
            get {
                object obj = ResourceManager.GetObject("ImgProfileSupportGeneratePerimeters", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileSupportSelfSupportAngle {
            get {
                object obj = ResourceManager.GetObject("ImgProfileSupportSelfSupportAngle", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgProfileSupportXYDistanceFromModel {
            get {
                object obj = ResourceManager.GetObject("ImgProfileSupportXYDistanceFromModel", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Linear density is the mass of 1km of fiber in grams..
        /// </summary>
        public static string LinearDensity {
            get {
                return ResourceManager.GetString("LinearDensity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The build plate temperature on first layers is the table temperature which is kept constant only on first layers below height defined in settings. It should be high enough for a part immediately and securely glues to a table..
        /// </summary>
        public static string PlasticBedHeatupOnFLs {
            get {
                return ResourceManager.GetString("PlasticBedHeatupOnFLs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The build plate temperature is the table constant temperature throughout all printing process except printing first layers. Set this value high enough so a part won&apos;t detache and edges won&apos;t bend..
        /// </summary>
        public static string PlasticBedTemperature {
            get {
                return ResourceManager.GetString("PlasticBedTemperature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The coast length is the length of the last polygon segment which is printed without plastic extrusion. Plastic goes out only by gravity on this coast segment. Choose length enough to stop free plastic spilling after retract, however, keep an eye on underextrusion..
        /// </summary>
        public static string PlasticCoastAtEndLength {
            get {
                return ResourceManager.GetString("PlasticCoastAtEndLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable print cooling is the flag of fan on/off for cooling extruders. For best results, turn on cooling with any print..
        /// </summary>
        public static string PlasticCoolingEnable {
            get {
                return ResourceManager.GetString("PlasticCoolingEnable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The first layers fan speed height is the height below which cooling rules are special. Choose a minimum but sufficient height so a part is securely glued to a bed and part geometry won&apos;t lose its geometry by bed heating..
        /// </summary>
        public static string PlasticCoolingFirstLayersFanHeight {
            get {
                return ResourceManager.GetString("PlasticCoolingFirstLayersFanHeight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Choose the fan speed low enough for better adhesion to a bed and to prevent geometry changes due to bed heating..
        /// </summary>
        public static string PlasticCoolingFirstLayersFanSpeed {
            get {
                return ResourceManager.GetString("PlasticCoolingFirstLayersFanSpeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum fan speed is the fan speed for cooling, which is used when layer time is less than minimal layer time (specified in settings). Indicated as percentage. Choose maximum speed to have no form meltings and geometry distorsions..
        /// </summary>
        public static string PlasticCoolingMaximumFanSpeed {
            get {
                return ResourceManager.GetString("PlasticCoolingMaximumFanSpeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The layer time for max fan speed is the time when edges of a part start melting and the part losing its geometry integrity with regular fan speed..
        /// </summary>
        public static string PlasticCoolingMinLayerTimeForCooling {
            get {
                return ResourceManager.GetString("PlasticCoolingMinLayerTimeForCooling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The regular fan speed is the fan speed for cooling while all printing process except printing first layers. Indicated as percentage. Choose high enough for saving part geometry undisturbed, but not too high for layers start losing good adhesion beetwen themselves..
        /// </summary>
        public static string PlasticCoolingRegularFanSpeed {
            get {
                return ResourceManager.GetString("PlasticCoolingRegularFanSpeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The extra unretract length is the value additional to retract length. On print resuming, if portion of plastic has spilled from an extruder, then volume of plastic in a nozzle becomes less than what it was before travel. If you have noticed for this plastic (especcially for runny) that at the beginning of print there is an underextrusion migrating to normal extrusion, then you shoud set not null for this parameter..
        /// </summary>
        public static string PlasticExtraLength {
            get {
                return ResourceManager.GetString("PlasticExtraLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The unretract speed is the speed of direct movement of plastic in a feeder. Choose maximum for fast printing restart, however, keep in mind that some feeders can&apos;t handle fast feeding speed..
        /// </summary>
        public static string PlasticExtraSpeed {
            get {
                return ResourceManager.GetString("PlasticExtraSpeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The flow multiplier is a correction factor of plastic extrusion. Vary this parameter if all parts have under- or overextrusion..
        /// </summary>
        public static string PlasticExtrusionMultiplier {
            get {
                return ResourceManager.GetString("PlasticExtrusionMultiplier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The filament diameter of plastic thread is measured in cross section. Usually it is 1.75mm or 3mm. You can find this value on the package of plastic filament..
        /// </summary>
        public static string PlasticFilamentDiameter {
            get {
                return ResourceManager.GetString("PlasticFilamentDiameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The first layers temperatures height is the height below which extruders and a table have special heating rules..
        /// </summary>
        public static string PlasticFirstLayersHeightMM {
            get {
                return ResourceManager.GetString("PlasticFirstLayersHeightMM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The retraction length on tool change is the length of plastic reverse movement in a feeder. Choose maximum length, taking into account the fact that plastic won&apos;t be fed into this tool for a long time and it is necessary to prevent plastic leakings due to gravity..
        /// </summary>
        public static string PlasticRetractionLengthOnChangingExtruder {
            get {
                return ResourceManager.GetString("PlasticRetractionLengthOnChangingExtruder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The retraction length is the length of plastic reverse movement in a feeder. Choose long enough length to stop pressure onto plastic in an extruder chamber. Keep in mind that during retract, the extruder stays still, so the longer retract, the longer it stays without movement, which can lead to part melting by the extruder, and leakings for runny plastics..
        /// </summary>
        public static string PlasticRetractionLengthOnTravel {
            get {
                return ResourceManager.GetString("PlasticRetractionLengthOnTravel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The retract speed is the speed of reverse movement of plastic in a feeder. Choose maximum for fast printing restart, however, keep in mind that some feeders can&apos;t handle fast feeding speed..
        /// </summary>
        public static string PlasticRetractionSpeed {
            get {
                return ResourceManager.GetString("PlasticRetractionSpeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The retraction minimum travel is the sufficient travel length before retraction. In case of short travels it makes no sence to stop for retraction because plastic has not enough time to spill out uncontrolled. Choose this value to maximum, but beware of plastic leaks while travels..
        /// </summary>
        public static string PlasticRetractMinimumTravelNoCrossing {
            get {
                return ResourceManager.GetString("PlasticRetractMinimumTravelNoCrossing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The extruder temperature on first layers is the extruder printing temperature which is kept constant only on first layers - below height defined in settings..
        /// </summary>
        public static string PlasticTemperatureOnFLs {
            get {
                return ResourceManager.GetString("PlasticTemperatureOnFLs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The extruder temperature is the temperature at which plastic will be melted for extruding from a nozzle. You can find an appropriate temperature range on the plastic filament package..
        /// </summary>
        public static string PlasticTemperaturePrint {
            get {
                return ResourceManager.GetString("PlasticTemperaturePrint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The standby extruder temperature is the extruder temperature at which it will be in an inactive state (another extruder is active, i.e. is printing). It should be as close as possible to printing temperature for faster heatup and print start, but low enough to prevent plastic free flow out from an extruder by gravity..
        /// </summary>
        public static string PlasticTemperatureWait {
            get {
                return ResourceManager.GetString("PlasticTemperatureWait", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The wipe nozzle length is the length of reverse print head movement. The print head is moving in reverse after retract and is wiping spilling plastic on already printed lines. Choose length enough for stop free plastic spilling after retract..
        /// </summary>
        public static string PlasticWipeNozzleLength {
            get {
                return ResourceManager.GetString("PlasticWipeNozzleLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Z-hop height is the extruder lift up height when moving between print areas. Choose minimum for fast printing process, but enough for prevent part edges hitting and as a result bringing and leaving beads on a part shell. Z-hop may lead formation of strings, however, it is usually easier remove this than removing beads..
        /// </summary>
        public static string PlasticZHopP {
            get {
                return ResourceManager.GetString("PlasticZHopP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The additional retract length is the additional length of plastic reverse movement in a feeder which will be added to the retract length value for used plastics. Use this parameter if your printer has bowden tube for plastic feeding, because in this case retraction inertia may appear..
        /// </summary>
        public static string PrinterAdditionalRetract {
            get {
                return ResourceManager.GetString("PrinterAdditionalRetract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The end G-code is the code which is executed at the end of print process..
        /// </summary>
        public static string PrinterEndGCode {
            get {
                return ResourceManager.GetString("PrinterEndGCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The has heated table flag is the flag which indicates if a printer has heatable table..
        /// </summary>
        public static string PrinterHasHeatedTable {
            get {
                return ResourceManager.GetString("PrinterHasHeatedTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The height is the size of build area along the Z axis..
        /// </summary>
        public static string PrinterHeight {
            get {
                return ResourceManager.GetString("PrinterHeight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The external shell acceleration is the acceleration which is used only for external shell printing. It has affect on travels and moves with extrusion..
        /// </summary>
        public static string PrinterInset0Acceleration {
            get {
                return ResourceManager.GetString("PrinterInset0Acceleration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The external shell jerk is the jerk value which is used only for external shell printing. It has affect on travels and moves without extrusion..
        /// </summary>
        public static string PrinterInset0Jerk {
            get {
                return ResourceManager.GetString("PrinterInset0Jerk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The depth is the size of build area along the Y axis..
        /// </summary>
        public static string PrinterLength {
            get {
                return ResourceManager.GetString("PrinterLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Z-lift on tool change is the height at which a print head raises for tool change..
        /// </summary>
        public static string PrinterOnChangeExtruderUpMM {
            get {
                return ResourceManager.GetString("PrinterOnChangeExtruderUpMM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The regular acceleration is the acceleration which is used for all printing areas except an external shell. It has affect on travels and moves with extrusions..
        /// </summary>
        public static string PrinterOthersAcceleration {
            get {
                return ResourceManager.GetString("PrinterOthersAcceleration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The regular jerk is the jerk which is used for all printing areas except an external shell. It has affect on travels and moves with extrusion..
        /// </summary>
        public static string PrinterOthersJerk {
            get {
                return ResourceManager.GetString("PrinterOthersJerk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The start G-code is the code which is executed at the start of print process..
        /// </summary>
        public static string PrinterStartGCode {
            get {
                return ResourceManager.GetString("PrinterStartGCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The X/Y travel speed is the linear speed of print head movements in XY plane without extrusions..
        /// </summary>
        public static string PrinterTravelSpeedXY {
            get {
                return ResourceManager.GetString("PrinterTravelSpeedXY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Z travel speed is the linear speed of print head movements in the Z direction without extrusion..
        /// </summary>
        public static string PrinterTravelSpeedZ {
            get {
                return ResourceManager.GetString("PrinterTravelSpeedZ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The enable acceleration control is the flag of manual control over acceleartions..
        /// </summary>
        public static string PrinterUseAccelerations {
            get {
                return ResourceManager.GetString("PrinterUseAccelerations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The enable jerk control is the flag of manual control over jerks..
        /// </summary>
        public static string PrinterUseJerks {
            get {
                return ResourceManager.GetString("PrinterUseJerks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The width is the size of build area along the X axis..
        /// </summary>
        public static string PrinterWidth {
            get {
                return ResourceManager.GetString("PrinterWidth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The extrusion width coefficient is the nozzle diameter multiplication factor. That is extrusion width = nozzle diameter * coefficient..
        /// </summary>
        public static string ProfileBrimEWCoeff {
            get {
                return ResourceManager.GetString("ProfileBrimEWCoeff", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The brim loops count is the number of brim loops around a part. The more loops, the adhesion between parts and a table is stronger..
        /// </summary>
        public static string ProfileBrimLoops {
            get {
                return ResourceManager.GetString("ProfileBrimLoops", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The first layer extrusion width coefficient is the extrusion width multiplication factor. It has affect on extrusion width for all entities on first layer and consequently on plastic amount..
        /// </summary>
        public static string ProfileFLEWCoeffToNormal {
            get {
                return ResourceManager.GetString("ProfileFLEWCoeffToNormal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The first layer printing speed is the speed of printing of all entities at the first layer. You may want to set this value a little slower than average speed on other layers to improve adhesion between parts and a table..
        /// </summary>
        public static string ProfileFLSpeed {
            get {
                return ResourceManager.GetString("ProfileFLSpeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The first layer height is the height of the first layer. Set this parameter a little bit larger that other microlayers to compensate table relief. The first layer has no microlayers structure as macrolayer and it doesn&apos;t comprise into any macrolayer as other microlayers..
        /// </summary>
        public static string ProfileFLThickness {
            get {
                return ResourceManager.GetString("ProfileFLThickness", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The angle between main ribs is the angle between side ribs in anisogrid triangles..
        /// </summary>
        public static string ProfileInfillFiberAnisogridAngleBetweenMainRibs {
            get {
                return ResourceManager.GetString("ProfileInfillFiberAnisogridAngleBetweenMainRibs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The fill density percent is the percent of filled space inside the shell..
        /// </summary>
        public static string ProfileInfillFiberAnisogridFillDensity {
            get {
                return ResourceManager.GetString("ProfileInfillFiberAnisogridFillDensity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The guide angle is the angle between the vector that is going through the middle of a triangle base and its opposite vertex, and the horizontal axis OX..
        /// </summary>
        public static string ProfileInfillFiberAnisogridOrientation {
            get {
                return ResourceManager.GetString("ProfileInfillFiberAnisogridOrientation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The extrusion width is the width of composite material (plastic + fiber)..
        /// </summary>
        public static string ProfileInfillFiberCellularEW {
            get {
                return ResourceManager.GetString("ProfileInfillFiberCellularEW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The infill extension into perimeters is the distance by which infill penetrates perimeters. Choose the length that provides infills fusion together with perimeters..
        /// </summary>
        public static string ProfileInfillFiberCellularExtendIntoPerimeter {
            get {
                return ResourceManager.GetString("ProfileInfillFiberCellularExtendIntoPerimeter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The fiber feedrate is the percentage of full presumed path length. Decrease this parameter to raise fiber tension and increase this parameter to decrease fiber tension..
        /// </summary>
        public static string ProfileInfillFiberCellularExtrusionFiberMaxPercent {
            get {
                return ResourceManager.GetString("ProfileInfillFiberCellularExtrusionFiberMaxPercent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The minimum line length is the length of shortest line that can be printed as it is (with/without prolonging and with/without connection in polygon with other infill lines)..
        /// </summary>
        public static string ProfileInfillFiberCellularMinSegmentLength {
            get {
                return ResourceManager.GetString("ProfileInfillFiberCellularMinSegmentLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The printing speed coefficient is the multiplication factor which will be applied to fiber print speeds..
        /// </summary>
        public static string ProfileInfillFiberCellularSpeedCoefficient {
            get {
                return ResourceManager.GetString("ProfileInfillFiberCellularSpeedCoefficient", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The fill density percent is the percent of filled space inside the shell..
        /// </summary>
        public static string ProfileInfillFiberIsogridDensity {
            get {
                return ResourceManager.GetString("ProfileInfillFiberIsogridDensity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The guide angle is the angle between the vector that is going through the middle of a triangle base and its opposite vertex, and the horizontal axis OX..
        /// </summary>
        public static string ProfileInfillFiberIsogridOrientation {
            get {
                return ResourceManager.GetString("ProfileInfillFiberIsogridOrientation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The fill density percent is the percent of filled space inside the shell..
        /// </summary>
        public static string ProfileInfillFiberRombicGridDensity {
            get {
                return ResourceManager.GetString("ProfileInfillFiberRombicGridDensity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The first rib angle is the angle between the one pair of parallel ribs in rombic grid and the horizontal axis OX..
        /// </summary>
        public static string ProfileInfillFiberRombicGridFirstRibAngle {
            get {
                return ResourceManager.GetString("ProfileInfillFiberRombicGridFirstRibAngle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The second rib angle is the angle between the another pair of parallel ribs in rombic grid and the horizontal axis OX..
        /// </summary>
        public static string ProfileInfillFiberRombicGridSecondRibAngle {
            get {
                return ResourceManager.GetString("ProfileInfillFiberRombicGridSecondRibAngle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The guide directions is the angles of reinfircing infill lines in a layer. You shoud divide angles with / character. For example, the &quot;60/-60/0&quot; string will result on the 1st layer 60° angle of infill lines, on the 2nd layer -60° angle of infill lines, on the 3rd layer 0°, on the 4th layer 60°, on the 5th layer -60°, on the 6th layer 0° e.t.c.
        /// </summary>
        public static string ProfileInfillFiberSolidAngleList {
            get {
                return ResourceManager.GetString("ProfileInfillFiberSolidAngleList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The extrusion width is the width of composite material (plastic + fiber)..
        /// </summary>
        public static string ProfileInfillFiberSolidEW {
            get {
                return ResourceManager.GetString("ProfileInfillFiberSolidEW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The infill extension into perimeters is the distance by which infill penetrates perimeters. Choose the length that provides infills fusion together with perimeters..
        /// </summary>
        public static string ProfileInfillFiberSolidExtendIntoPerimeters {
            get {
                return ResourceManager.GetString("ProfileInfillFiberSolidExtendIntoPerimeters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The fiber feedrate is the percentage of full presumed path length. Decrease this parameter to raise fiber tension and increase this parameter to decrease fiber tension..
        /// </summary>
        public static string ProfileInfillFiberSolidExtrusionFiberMaxPercent {
            get {
                return ResourceManager.GetString("ProfileInfillFiberSolidExtrusionFiberMaxPercent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The minimum line length is the length of shortest line that can be printed as it is (with/without prolonging and with/without connection in polygon with other infill lines)..
        /// </summary>
        public static string ProfileInfillFiberSolidMinSegmentLength {
            get {
                return ResourceManager.GetString("ProfileInfillFiberSolidMinSegmentLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The printing speed coefficient is the multiplication factor which will be applied to fiber print speeds..
        /// </summary>
        public static string ProfileInfillFiberSolidSpeedCoefficient {
            get {
                return ResourceManager.GetString("ProfileInfillFiberSolidSpeedCoefficient", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The extrusion width coefficient is the nozzle diameter multiplication factor. That is extrusion width = nozzle diameter * coefficient..
        /// </summary>
        public static string ProfileInfillPCEWCoeff {
            get {
                return ResourceManager.GetString("ProfileInfillPCEWCoeff", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The printing speed is the speed which will be applied to plastic infill printing. Set this parameter as high as possible to speed up printing process..
        /// </summary>
        public static string ProfileInfillPCSpeed {
            get {
                return ResourceManager.GetString("ProfileInfillPCSpeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The fill starting angle is the angle of infill rotation..
        /// </summary>
        public static string ProfileInfillPCStartingAngle {
            get {
                return ResourceManager.GetString("ProfileInfillPCStartingAngle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fill pattern. You could choose from three patterns: lines, grid or triangles, depending on your preferences..
        /// </summary>
        public static string ProfileInfillPCType {
            get {
                return ResourceManager.GetString("ProfileInfillPCType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The fill angle offset is the offset angle which is added to current infill rotation angle on each layer. For example, if fill angle offset is 10°, on first macro layer angle is 0°, on second is 10°, on third is 20° etc..
        /// </summary>
        public static string ProfileInfillPSAngleStep {
            get {
                return ResourceManager.GetString("ProfileInfillPSAngleStep", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The extrusion width coefficient is the nozzle diameter multiplication factor. That is extrusion width = nozzle diameter * coefficient.
        /// </summary>
        public static string ProfileInfillPSEWCoeff {
            get {
                return ResourceManager.GetString("ProfileInfillPSEWCoeff", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The solid plastic layers above fiber count is the number of macrolayers in which solid infill will be generated. This parameter not used as solid plastic layers below fiber, so you may want to use it only for cover up fiber polygons from above..
        /// </summary>
        public static string ProfileInfillPSMacroLayersOntoFiberCount {
            get {
                return ResourceManager.GetString("ProfileInfillPSMacroLayersOntoFiberCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The solid plastic layers below fiber count is the number of macrolayers in which solid infill will be generated. It needs to prevent fiber fall through cellular infill..
        /// </summary>
        public static string ProfileInfillPSMacroLayersUnderFiberCount {
            get {
                return ResourceManager.GetString("ProfileInfillPSMacroLayersUnderFiberCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The printing speed is the speed which will be applied to plastic infill printing. Set this parameter as high as possible to speed up printing process..
        /// </summary>
        public static string ProfileInfillPSSpeed {
            get {
                return ResourceManager.GetString("ProfileInfillPSSpeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The fill starting angle is the starting angle of infill rotation..
        /// </summary>
        public static string ProfileInfillPSStartingAngle {
            get {
                return ResourceManager.GetString("ProfileInfillPSStartingAngle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The extrusion width coefficient is the nozzle diameter multiplication factor. That is extrusion width = nozzle diameter * coefficient..
        /// </summary>
        public static string ProfileInset0EWCoeff {
            get {
                return ResourceManager.GetString("ProfileInset0EWCoeff", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The printing speed is the speed which will be applied to external shell printing. Set this parameter to the sufficient minimum to improve surface quality of parts. The slower printing speed, the lower chance to obtain vertical ringing on parts..
        /// </summary>
        public static string ProfileInset0Speed {
            get {
                return ResourceManager.GetString("ProfileInset0Speed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The extrusion width is the width of composite material (plastic + fiber)..
        /// </summary>
        public static string ProfileInsetXFEW {
            get {
                return ResourceManager.GetString("ProfileInsetXFEW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The fiber feedrate is the percent of full presumed path length. Descrease this parameter to increase fiber tension and increase this parameter to descrease fiber tension..
        /// </summary>
        public static string ProfileInsetXFExtrusionFiberMaxPercent {
            get {
                return ResourceManager.GetString("ProfileInsetXFExtrusionFiberMaxPercent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The printing speed coefficient is the multiplication factor which will be applied to fiber print speeds..
        /// </summary>
        public static string ProfileInsetXFSpeed {
            get {
                return ResourceManager.GetString("ProfileInsetXFSpeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The extrusion width coefficient is the nozzle diameter multiplication factor. That is extrusion width = nozzle diameter * coefficient..
        /// </summary>
        public static string ProfileInsetXPEWCoeff {
            get {
                return ResourceManager.GetString("ProfileInsetXPEWCoeff", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The printing speed is the speed which will be applied to plastic perimeters printing. Set this parameter as high as possible to speed up printing process..
        /// </summary>
        public static string ProfileInsetXPSpeed {
            get {
                return ResourceManager.GetString("ProfileInsetXPSpeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The infill layer height is the height of layers which contain cellular infill. The cellular infill is inside plastic perimeters and leaves an empty space in a part..
        /// </summary>
        public static string ProfileLayerThicknessInfillRatioToMacro {
            get {
                return ResourceManager.GetString("ProfileLayerThicknessInfillRatioToMacro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The external shell height is the height of thin plastic layers which build up an external shell of a part. The thinner external shell, the more precise and accurate the part looks..
        /// </summary>
        public static string ProfileLayerThicknessInset0RatioToMacro {
            get {
                return ResourceManager.GetString("ProfileLayerThicknessInset0RatioToMacro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The plastic perimeters layer height is the height of thick plastic shell. Set this value as much as possible to speed up the print process. Because plastic perimeters are not visible they can be printed thicker than an external shell to speed up the printing process..
        /// </summary>
        public static string ProfileLayerThicknessInsetXPRatioToMacro {
            get {
                return ResourceManager.GetString("ProfileLayerThicknessInsetXPRatioToMacro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The macrolayer height is the height of a layer package which contains microlayers. The microlayer is the layer which contains one or more print entities with the same height. The macrolayer contains microlayers and its structure is defined by microlayer heights. For example, macrolayer height = 0.6mm, external shell height = 0.2mm, plastic perimeters height = 0.3mm, fiber layer height is always equal to macrolayer height and now it is 0.6mm. Accordinally, in this macrolayer we have 4 microlayers. First on 0 [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ProfileLayerThicknessMacroLayerHeight {
            get {
                return ResourceManager.GetString("ProfileLayerThicknessMacroLayerHeight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The thick support layer height is the height of layers which contain thick supports. The thick support is calcalated by intersection of thin support layers. Set thick support layer height as large as possible to speed up the print process..
        /// </summary>
        public static string ProfileLayerThicknessSSThickRatioToMacro {
            get {
                return ResourceManager.GetString("ProfileLayerThicknessSSThickRatioToMacro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The thin support layer height is the height of layers which contain thin supports. Thin supports are generated in the areas which can&apos;t be converted into thick support..
        /// </summary>
        public static string ProfileLayerThicknessSSThinRatioToMacro {
            get {
                return ResourceManager.GetString("ProfileLayerThicknessSSThinRatioToMacro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The avoid crossing borders flag is the flag which indicates that border crossing minimization mode in on. It means that if it is possible to travel from one print area to another without crossing borders, that path will be chosen instead of direct path with borders crossing . This mode increases print time, but improves external surface quality..
        /// </summary>
        public static string ProfileOozePreventionDoAvoidCrossingPerimeters {
            get {
                return ResourceManager.GetString("ProfileOozePreventionDoAvoidCrossingPerimeters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The do coast before retract is the flag which indicates that plastic polygon will have dry (without plastic feeding) segments in the end..
        /// </summary>
        public static string ProfileOozePreventionDoCoastAtEnd {
            get {
                return ResourceManager.GetString("ProfileOozePreventionDoCoastAtEnd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The do retract on changing layers is the flag which indicates that plastic will be retracted on layer change even if there is no XY movements during change layers..
        /// </summary>
        public static string ProfileOozePreventionDoRetractOnLayerChange {
            get {
                return ResourceManager.GetString("ProfileOozePreventionDoRetractOnLayerChange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The do retract only when crossing borders is the flag which indicates that only crossing perimeter travels will have retracts before them. Choose that mode to speed up print process. Plastic that running from nozzle on travels will be all inside a part, so it will not be visible. If you want to do retract before all travels you should uncheck this flag..
        /// </summary>
        public static string ProfileOozePreventionDoRetractOnlyWhenCrossingPerimeters {
            get {
                return ResourceManager.GetString("ProfileOozePreventionDoRetractOnlyWhenCrossingPerimeters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The do wipe nozzle flag is the flag which indicates that plastic polygon will have reverse movement after full polygon print has ended..
        /// </summary>
        public static string ProfileOozePreventionDoWipeNozzle {
            get {
                return ResourceManager.GetString("ProfileOozePreventionDoWipeNozzle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The do z-hop when retracted flag is the flag which switches on/off a nozzle z-hop mode when travel has retract. Choose this mode to improve external shell surface quality, but keep in mind that it sligtly slow down print process. Besides, it may produce strings between print areas, but usually it is easier to remove them than plastic drops..
        /// </summary>
        public static string ProfileOozePreventionDoZHop {
            get {
                return ResourceManager.GetString("ProfileOozePreventionDoZHop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The minimum layer print time. If layer print time is less that this parameter value, the printing speed will be reduced..
        /// </summary>
        public static string ProfileOtherCoolingMinLayerTimeForSlowing {
            get {
                return ResourceManager.GetString("ProfileOtherCoolingMinLayerTimeForSlowing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The infill extension into perimeters is the length by which infill penetrate perimeters. Choose the length that provides infills fusion together with perimeters..
        /// </summary>
        public static string ProfileOtherInfillPSExtendIntoPerimeter {
            get {
                return ResourceManager.GetString("ProfileOtherInfillPSExtendIntoPerimeter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When this parameter is 0 plastic polygon is fully closed. When this parameter is 1, plastic polygon has empty gap that is equal to extrusion width. Choose the value that is differ from 0, if you&apos;ve seen the plastic overextrusions on polygon seam..
        /// </summary>
        public static string ProfileOtherTrimGapRatio {
            get {
                return ResourceManager.GetString("ProfileOtherTrimGapRatio", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The use fiber flag is the flag which indicates that parts may be reinforced with fiber..
        /// </summary>
        public static string ProfilePartAllowGenerateFiber {
            get {
                return ResourceManager.GetString("ProfilePartAllowGenerateFiber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The anisogrid ribs crossing type. You may choose from two types: first is when all crossing will be laying near one mutual vertex and second is when transverse rib will be laying on the middles of main (side) ribs..
        /// </summary>
        public static string ProfilePartAnisogridRibPlacementType {
            get {
                return ResourceManager.GetString("ProfilePartAnisogridRibPlacementType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The generate brim flag is the flag which indicates that the Aura will generate brims for parts. The brim is the extended contour of a part on a first layer. Use brim to prevent part stick-off from table surface during printing process..
        /// </summary>
        public static string ProfilePartGenerateBrim {
            get {
                return ResourceManager.GetString("ProfilePartGenerateBrim", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The generate reinforced infills flag is the flag which indicates that the Aura will generate reinforced infills for printed parts..
        /// </summary>
        public static string ProfilePartGenerateFiberInfills {
            get {
                return ResourceManager.GetString("ProfilePartGenerateFiberInfills", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The generate reinforced perimeters flag is the flag which indicates that the Aura will generate reinforced perimeters for printed parts..
        /// </summary>
        public static string ProfilePartGenerateFiberPerimeters {
            get {
                return ResourceManager.GetString("ProfilePartGenerateFiberPerimeters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The generate skirt is the flag which indicates that the Aura will generate skirts for parts. The skirt is the extended contour of a part on a first layer. Use skirt to stabilize plastic flow in extruder before main printing..
        /// </summary>
        public static string ProfilePartGenerateSkirt {
            get {
                return ResourceManager.GetString("ProfilePartGenerateSkirt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The generate support flag is the flag which indicates that the Aura will generate supports for parts. The support is used to prevent the fall of overhanging parts..
        /// </summary>
        public static string ProfilePartGenerateSupport {
            get {
                return ResourceManager.GetString("ProfilePartGenerateSupport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The generate wipe tower flag is the flag which indicates that the Aura will generate wipe tower for parts. The wipe tower is a service part that is being printed at the same time as main parts. The wipe tower is used to clean nozzles on tool change..
        /// </summary>
        public static string ProfilePartGenerateWipeTower {
            get {
                return ResourceManager.GetString("ProfilePartGenerateWipeTower", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The fill density percent is the percent of filled space inside the shell..
        /// </summary>
        public static string ProfilePartInfillCPercent {
            get {
                return ResourceManager.GetString("ProfilePartInfillCPercent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The fiber infill pattern. You may choose from four patterns: solid, rombic grid, isogrid and anisogrid..
        /// </summary>
        public static string ProfilePartInfillFiberType {
            get {
                return ResourceManager.GetString("ProfilePartInfillFiberType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The top/bottom solid layers count is the number of layers in which solid infill will be generated. The solid infill will be generated in special spots - where a layer contacts with external environment..
        /// </summary>
        public static string ProfilePartInfillSBottomTopLayerCount {
            get {
                return ResourceManager.GetString("ProfilePartInfillSBottomTopLayerCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The inner reinforced perimeters count is the number of perimeters which will reinforce inner holes (not surface) of a part..
        /// </summary>
        public static string ProfilePartInsetFInnerCount {
            get {
                return ResourceManager.GetString("ProfilePartInsetFInnerCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The outer reinforced perimeters count is the number of perimeters which will reinforce outer surface(not holes) of a part..
        /// </summary>
        public static string ProfilePartInsetFOuterCount {
            get {
                return ResourceManager.GetString("ProfilePartInsetFOuterCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The external shell perimeters is the number of perimeters which build the plastic external shell - the most precise one..
        /// </summary>
        public static string ProfilePartInsetX0Count {
            get {
                return ResourceManager.GetString("ProfilePartInsetX0Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The plastic perimeters count inside fiber is the number of perimeters between fiber and cellular infill..
        /// </summary>
        public static string ProfilePartInsetXPInnerWhenFiberCount {
            get {
                return ResourceManager.GetString("ProfilePartInsetXPInnerWhenFiberCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The plastic perimeters count is the number of perimeters which build the plastic internal shell. It provides solidity of part surface..
        /// </summary>
        public static string ProfilePartInsetXPOnlyCount {
            get {
                return ResourceManager.GetString("ProfilePartInsetXPOnlyCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The plastic perimeters count outside fiber is the number of perimeters between external shell and fiber perimeters..
        /// </summary>
        public static string ProfilePartInsetXPOuterWhenFiberCount {
            get {
                return ResourceManager.GetString("ProfilePartInsetXPOuterWhenFiberCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The distance from part is the distance between skirt and part..
        /// </summary>
        public static string ProfileSkirtDistance {
            get {
                return ResourceManager.GetString("ProfileSkirtDistance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The skirt loops count is the number of skirt loops around a part. Choose the sufficient number to stabilize plastic flow by the end of printing the skirt..
        /// </summary>
        public static string ProfileSkirtLoops {
            get {
                return ResourceManager.GetString("ProfileSkirtLoops", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The bottom airgap thin layers count is the number of layers between the bottom of a support and the top of a part. Choose a value with which support will be easy to tear from a part and support will not fall down because of large distance to a part..
        /// </summary>
        public static string ProfileSSAirGapToBottom {
            get {
                return ResourceManager.GetString("ProfileSSAirGapToBottom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The top airgap thin layers count is the number of layers between the top of a support and the bottom of a part. Choose a value with which support will be easy to tear from a part and supported areas will not fall down because of large distance to a support..
        /// </summary>
        public static string ProfileSSAirGapToUp {
            get {
                return ResourceManager.GetString("ProfileSSAirGapToUp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The make airgaps flag is the flag which indicates that air gaps will be generated onto and/or under supports..
        /// </summary>
        public static string ProfileSSDoAirGap {
            get {
                return ResourceManager.GetString("ProfileSSDoAirGap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The extrusion width coefficient is the nozzle diameter multiplication factor. That is extrusion width = nozzle diameter * coefficient..
        /// </summary>
        public static string ProfileSSEWCoeffThickAndThin {
            get {
                return ResourceManager.GetString("ProfileSSEWCoeffThickAndThin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The generate support in holes is the flag which indicates that support will be generated not only on the outside of part but in holes too..
        /// </summary>
        public static string ProfileSSGenerateInternalSupport {
            get {
                return ResourceManager.GetString("ProfileSSGenerateInternalSupport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The generate shell for support is the flag which indicates that external shell will be generated for supports..
        /// </summary>
        public static string ProfileSSGeneratePerimeters {
            get {
                return ResourceManager.GetString("ProfileSSGeneratePerimeters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The fill density percent is the percent of filled space inside the support..
        /// </summary>
        public static string ProfileSSInfillPercent {
            get {
                return ResourceManager.GetString("ProfileSSInfillPercent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fill pattern. You could choose from three patterns: lines, grid or triangles, depending on your preferences..
        /// </summary>
        public static string ProfileSSInfillType {
            get {
                return ResourceManager.GetString("ProfileSSInfillType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The max unsopported overhang angle up to which part overhang has no need to be supported. If angle is more than the unsupported angle then supports will be generated. The angle is regarding to vertical axe..
        /// </summary>
        public static string ProfileSSSelfSupportAngle {
            get {
                return ResourceManager.GetString("ProfileSSSelfSupportAngle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The thick support printing speed is the speed which will be applied to thick support printing. Set this parameter as high as possible to speed up printing process..
        /// </summary>
        public static string ProfileSSSpeedThick {
            get {
                return ResourceManager.GetString("ProfileSSSpeedThick", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The thin support printing speed is the speed which will be applied to thin support printing. Set this parameter as high as possible to speed up printing process..
        /// </summary>
        public static string ProfileSSSpeedThin {
            get {
                return ResourceManager.GetString("ProfileSSSpeedThin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The fill angle is the angle of infill rotation..
        /// </summary>
        public static string ProfileSSStartingAngle {
            get {
                return ResourceManager.GetString("ProfileSSStartingAngle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The horizontal X/Y distance from model is the offset from a part to supports. Set this parameter to a part has no fusion with supports..
        /// </summary>
        public static string ProfileSSXYDistanceFromObject {
            get {
                return ResourceManager.GetString("ProfileSSXYDistanceFromObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap Pusheen {
            get {
                object obj = ResourceManager.GetObject("Pusheen", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
    }
}
